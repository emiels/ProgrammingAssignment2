source('~/GitHub/R-Programming/ProgrammingAssignment2/tusk.R')
?makevector
??makevector
v<-as.vector(1:4)
class(v)
makevector(v)
makeVector(v)
makeVector(v, mean)
makeVector(v)
source('~/GitHub/R-Programming/ProgrammingAssignment2/tusk.R')
chachemean(v)
cachemean(v)
v<-makeVector(1:100)
v<-makeVector(1,1:100)
v<-makeVector(1)
v<-makeVector(1)
v<-makeVector(set)
v
x$getmean
v<-makeVector(set(c1:10))
v
m
v<-makeVector(set(c1:10))
cachemean(v[3])
x<-1:1000
v<-makeVector(x)
vec$getmean
v$getmean
v$getmean()
mx<-mean(x)
v$setmean(mx)
v$getmean()
vec<-makeVector(1:100))
vec<-makeVector(1:100)
cachemean(vec)
cachemean(vec)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
list(set = set, get = get)
}
source('~/GitHub/R-Programming/ProgrammingAssignment2/tusk.R')
vec<=makeVector(x)
x<-1:10000
vec<=makeVector(x)
vec<-makeVector(x)
source('~/GitHub/R-Programming/ProgrammingAssignment2/tusk.R')
vec<-makeVector(x)
vec$getmean()
mx<-mean(x)
vec$getmean()
vec$getmean(mx)
vec$setmean(mx)
vec$getmean(mx)
vec$getmean()
vec$getevn()
?ls
ls(vec$getevn())
parent.env(vec$getenv())
parent.env(vec$getevn())
ls(parent.env(vec$getevn()))
parent.env(vec$getevn())$m
x1<-makeVector(x)
x1
x <- matrix(rnorm(160000),400,400)
x-inv<-solve(x)
xinv<-solve(x)
View(x)
View(xinv)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
getevn<- function() environment()
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse, getevn = getevn)
}
xc <-makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cachesolve(xc)
cacheSolve(xc)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
x <- matrix(rnorm(1600),40,40)
xc <- makeCacheMatrix(x)
xinv <-cacheSolve(xc)
print(identical(xc$getInv(),solve(x)))
chachesolve(xc)
cacheSolve(xc)
print(identical(xc$getinverse(), solve(x)))
x <- matrix(rnorm(1600),40,40)
xc <- makeCacheMatrix(x)
for (i in 1:1000) {xinv <- cacheSolve(xc)}
for (i in 1:5) {xinv <- cacheSolve(xc)}
x <- matrix(rnorm(1600),40,40)
xc <- makeCacheMatrix(x)
for (i in 1:5) {xinv <- cacheSolve(xc)}
B = matrix(4:7,nrow=2,ncol=2)
fList <- makeCacheMatrix(B)
cacheSolve(fList) #first call, this will compute the inverse
cacheSolve(fList) #second call, this will get the result from the cache
xc$get()
B$get()
B <-matrix(4:7,nrow=2,ncol=2)
fList <- makeCacheMatrix(B)
flist$get()
fList$get()
fList$getinverse()
fList$setinverse()
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
x <- matrix(rnorm(1600),40,40)
xc <- makeCacheMatrix(x)
for (i in 1:1000) {
xinv <- cacheSolve(x_)
}
for (i in 1:10) {
xinv <- cacheSolve(xinv)
}
for (i in 1:10) {xinv <- cacheSolve(xc)}
xc$get()
?return
